import argparse
from pathlib import Path
import shutil
import rdkit.Chem as Chem

from analysis.molecule_builder import process_molecule

from Bio.PDB import PDBParser, PDBIO, MMCIFIO
from Bio.PDB.Polypeptide import is_aa
from Bio.PDB.PDBIO import Select
import numpy as np
from scipy.spatial.distance import cdist
import io
import pickle

# the purpose of this script is to take molecules generated by DiffSBDD for the CrossDocked test set (via DiffSBDD/test.py)
# and reorganize them into a directory structure that is equivalent to the directory structure produced by our test-set generation code (test_crossdocked.py)
# so that the scripts we've already written for evaluating model performance (docking & minimization experiments) can be easily run on molecules generated by DiffSBDD

def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('--diffsbdd_test_results', type=str, required=True, help='directory containing the output of DiffSBDD/test.py')
    # p.add_argument('--test_set_dir', type=str, help='filepath of directory containing DiffSBDD processed crossdocked test set', required=True)
    p.add_argument('--output_dir', type=str, required=True, help='directory to write the rearranged test results into')
    p.add_argument('--example_output_dir', required=True, help='filepath of directory containing results from ligdiff/test_crossdocked.py')
    p.add_argument('--dataset', type=str, default='bindingmoad')

    p.add_argument('--use_raw', action='store_true')
    p.add_argument('--extract_largest_frag', action='store_true')

    args = p.parse_args()

    if args.dataset not in ['bindingmoad', 'crossdocked']:
        raise ValueError

    return args

def extract_largest_frag(sdf_file_path: Path):
    mols_processed = []
    mols_unprocessed = [ m for m in Chem.SDMolSupplier(str(sdf_file_path), sanitize=False) ]
    for mol in mols_unprocessed:
        mol = process_molecule(mol, add_hydrogens=True, sanitize=True, largest_frag=True)
        if mol is not None:
            mols_processed.append(mol)

    with Chem.SDWriter(str(sdf_file_path)) as w:
        for mol in mols_processed:
            w.write(mol)

def process_rec_file(rec_file: Path, lig_file: Path, output_pocket_dir: Path, cutoff: float = 5):

    # parse pdb file
    pdb_struct = PDBParser(QUIET=True).get_structure('', rec_file)

    # get ligand positions
    ligand = Chem.MolFromMolFile(str(lig_file))
    ligand_conformer = ligand.GetConformer()
    atom_positions = ligand_conformer.GetPositions()

    # get binding pocket residues
    pocket_residues = []
    for residue in pdb_struct[0].get_residues():
        if not is_aa(residue.get_resname(), standard=True):
            continue
        res_coords = np.array([a.get_coord() for a in residue.get_atoms()])
        is_pocket_residue = cdist(atom_positions, res_coords).min() < cutoff
        if is_pocket_residue:
            pocket_residues.append(residue)

    # save just the pocket residues to the pdb
    pocket_file = output_pocket_dir / rec_file.name
    pocket_selector = PocketSelector(pocket_residues)
    pdb_io = PDBIO()
    pdb_io.set_structure(pdb_struct)
    pdb_io.save(str(pocket_file), pocket_selector)

    # save the entire structure
    full_receptor_file = output_pocket_dir / f'full_receptor.pdb'
    pdb_io = PDBIO()
    pdb_io.set_structure(pdb_struct)
    pdb_io.save(str(full_receptor_file))


class PocketSelector(Select):

    def __init__(self, residues: list):
        super().__init__()
        self.residues = residues

    def accept_residue(self, residue):
        return residue in self.residues


if __name__ == "__main__":
    args = parse_args()

    # construct output directory
    output_dir = Path(args.output_dir)
    output_dir.mkdir(exist_ok=True)
    output_sampled_mols_dir = output_dir / 'sampled_mols'
    output_sampled_mols_dir.mkdir(exist_ok=True)

    # get filepath of DiffSBDD generated molecuels
    diffsbdd_result_dir = Path(args.diffsbdd_test_results)
    if args.use_raw:
        diffsbdd_structs_dir = diffsbdd_result_dir / 'raw'
    else:
        diffsbdd_structs_dir = diffsbdd_result_dir / 'processed'


    example_dir = Path(args.example_output_dir) / 'sampled_mols'
    for example_pocket_dir in example_dir.iterdir():

        # find pocket file, reference files, raw ligand file
        example_pocket_pdb = example_pocket_dir / 'pocket.pdb'

        # find reference ligand file and rec file
        example_ref_dir = example_pocket_dir / 'reference_files'
        example_ref_files = list(example_ref_dir.iterdir())
        ref_sdfs = list(example_ref_dir.glob('[!.]*.sdf'))
        assert len(ref_sdfs) == 1
        example_ref_lig_file = ref_sdfs[0]
        
        # find reference receptor file for this pocket
        pdb_files = list(example_ref_dir.glob('[!.]*.pdb'))
        assert len(pdb_files) == 1
        example_ref_rec_file = pdb_files[0]

        # find the corresponding DiffSBDD generated ligands
        # get the name of the pocket as it appears in diffsbdd output files
        if args.dataset == 'crossdocked':
            diffsbdd_pocket_name = example_ref_rec_file.stem.replace('_', '-')
        elif args.dataset == 'bindingmoad':
            diffsbdd_pocket_name = example_ref_rec_file.stem
            
        # find all ligands in diffsbdd output that correspond to this ligand
        matched_lig_files = [ file for file in diffsbdd_structs_dir.iterdir() if diffsbdd_pocket_name in file.name ]

        if len(matched_lig_files) == 0: # just skip this pocket if we don't find any ligands
            print(f'warning: no ligand found for pocket {example_ref_rec_file}') 
            continue

        if args.dataset == 'bindingmoad':
            # for the bindingmoad dataset, there are often multiple ligands per receptor file
            # meaning, len(matched_lig_files) > 1, so we have to find the correct ligand file
            lig_id = example_ref_lig_file.stem.split('_')[-1]
            matched_lig_files = [ file for file in matched_lig_files if lig_id in file.name ]

        assert len(matched_lig_files) == 1 # this will break if the crossdocked test set contains duplicate receptors
        diffsbdd_lig_file = matched_lig_files[0]
        
        # construct the directory that will contain DiffSBDD generated ligands in a format that works with our evaluation/analysis scripts
        output_pocket_dir = output_sampled_mols_dir / example_pocket_dir.name
        output_pocket_dir.mkdir(exist_ok=True)

        # construct filepath for this pocket's ligands, copy DiffSBDD generated ligands into output dir
        new_lig_file = output_pocket_dir / f'raw_ligands.sdf'
        shutil.copy(diffsbdd_lig_file, new_lig_file) 

        # copy over reference files
        new_ref_files_dir = output_pocket_dir / 'reference_files'
        new_ref_files_dir.mkdir(exist_ok=True)
        shutil.copy(example_ref_lig_file, new_ref_files_dir)
        shutil.copy(example_ref_rec_file, new_ref_files_dir)

        # copy over the pocket pdb
        shutil.copy(example_pocket_pdb, output_pocket_dir)

        # find the file continaing diffsbdd's sampling time for this pocket
        pocket_time_file = diffsbdd_result_dir / 'pocket_times' / f'{example_ref_lig_file.stem}.txt'
        if not pocket_time_file.exists():
            raise FileNotFoundError(pocket_time_file)
        
        # get the sampling time
        with open(pocket_time_file, 'r') as f:
            sampling_time = f.read().strip().split(' ')[-1]
            sampling_time = float(sampling_time)

        # write the sampling time to the new output dir
        with open(output_pocket_dir / 'sampling_time.txt', 'w') as f:
            f.write(f'{sampling_time:.2f}')
        with open(output_pocket_dir / 'sampling_time.pkl', 'wb') as f:
            pickle.dump(sampling_time, f)
        

        # retain only largest fragment from ligands
        if args.extract_largest_frag:
            extract_largest_frag(new_lig_file)